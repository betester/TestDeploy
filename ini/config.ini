[env]
# 用于初始化环境 && 判断是否安装各类工具
# 辅助工具默认已安装。重新安装请谨慎: 容器存在会先删除后安装，新的挂载目录若和原来的不同会无法显示历史数据
installedEnv=false
installedJenkins=isJenkins
installedRedis=isRedis
installedSonarqube=isSonarqube
# 执行性能测试时，每个从机预留的cores数量
remaincores=1

[log]
hrunlog=/opt/testdeployInfo/hrunlog
locustlog=/opt/testdeployInfo/locustlog

[report]
hrunReportBaseHome=/opt/testdeployInfo/hrunreports
locustReportBaseHome=/opt/testdeployInfo/locustreports

[httprunner]
# 接口自动化统一执行入口
# 作用: 先实现环境切换再自动化执行用例
# 代码模板参考: https://github.com/qtracer/HttpRunner_Demo
hrun_main=main-hrun.py
# 接口自动化默认执行的指定路径
hrun_path=testsuites/

[locust]
# locust压测统一执行入口
# 代码模板参考: https://github.com/qtracer/Locust_Demo
locust_main=locustfile.py
# locust执行前切换压测环境和数据源的文件(务必放置在压测项目根目录下). 若不存在,则按照默认执行
locust_project_setEnv=project_setEnv.py
baseLocustHome=/opt/testdeployInfo/locustContainer
locust_workspace=/opt/locust

[email]
# 非必填,收件人用英文逗号隔开,如 10086@qq.com,10010@qq.com 
receiver=
sender=
sender_password=
smtp_server=
smtp_port=

[registry]
# 私库链接,如 nexus.baidu.com:9093/test/python:v3.8.8
# r_url_download=nexus.baidu.com:9093/test   确保所有镜像都存在url_download下
# r_python=python:v3.8.8   镜像约定格式
# 非必填,默认公网镜像源拉取(deamon.json); 当url_login & url_download & user & password & image均不为空才走私库拉取
# 注意信息填写准确性，脚本不做兜底
registry_url_login=
registry_url_download=
registry_user=
registry_password=
registry_python=
registry_redis=
registry_postgresql=
registry_sonarqube=
registry_jenkins=

[apitimeout]
# 针对locust压测报告90%、95%超时(毫秒)API的数量统计
api_90timeout=500
api_95timeout=500

[cron]
# seconds
locust_sendreport_wait=2
# 提供定时任务终止机制,当flag=0,days所有定时任务程序均终止
global_wait_flag=1
# 避免master节点每次执行main-cli.sh都生成任务,slave节点只有在initNodes才会生成 
master_cronExist_flag=0
# days, wait周期检测时间; interval过期删除
hrun_log_wait=1
hrun_log_interval=3
hrun_container_wait=1
hrun_container_interval=3
locust_log_wait=1
locust_log_interval=30

[python]
python_image=python:qtracer
basePythonHome=/opt/testdeployInfo/pythonContainer

[jenkins]
jenkins_image=jenkins:qtracer
jenkins_home=/opt/jenkins_home
jenkins_container=myjenkins
jenkins_port=8080

[redis]
redis_image=redis:qtracer
redis_container=myredis
redis_port=6379
redis_data=/opt/redisData

[postgresql]
psql_image=postgres:qtracer
psql_network=sonarnet
psql_user=sonar
psql_password=sonar
psql_db=sonarqube
psql_container=postgresql
psql_port=5432
psql_data=/opt/postgresql

[sonarqube]
sonar_image=sonarqube:qtracer
sonar_memory=4g
sonar_javaOpts=-Xmx4g
sonar_container=sonarqube
sonar_port=9000
sonar_data=/opt/sonarqube/data
sonar_logs=/opt/sonarqube/logs
sonar_ext=/opt/sonarqube/extensions
sonar_conf=/opt/sonarqube/conf

[appversion]
# docker-ce
dVersion=18.06.1
# docker-compose
dcVersion=1.27.3
# HttpRunner
hrunVersion=2.5.5
# python
pyVersion=3.8.9
# jdk
jdkVersion=11
# requests
reqVersion=2.24.0
# markupsafe
masaVersion=2.0.1
# redis
redisVersion=5.0.5
# locust
locustVersion=2.8.6
# sonarqube
sonarVersion=latest
# postgres
psqlVersion=latest

[filetransport]
# 文件原路径和传输目标路径 
sourceDir=mytmp
targetDir=/opt

[openresty]
openrestyVersion=1.19.9.1
openrestyHome=/opt/openresty_home

